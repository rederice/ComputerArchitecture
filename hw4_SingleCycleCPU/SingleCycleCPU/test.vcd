$date
	Wed Jan 17 20:59:57 2018
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$var reg 1 ! Clk $end
$var reg 1 " Reset $end
$var reg 1 # Start $end
$var integer 32 $ counter [31:0] $end
$var integer 32 % i [31:0] $end
$var integer 32 & outfile [31:0] $end
$scope module CPU $end
$var wire 1 ! clk_i $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var wire 32 ' inst_addr [31:0] $end
$var wire 32 ( inst [31:0] $end
$scope module ALU $end
$var wire 32 ) wr_and [31:0] $end
$var wire 32 * wr_or [31:0] $end
$var wire 32 + wr_sub [31:0] $end
$var wire 32 , wr_mul [31:0] $end
$var wire 32 - wr_add [31:0] $end
$var wire 32 . data_o [31:0] $end
$var wire 32 / data2_i [31:0] $end
$var wire 32 0 data1_i [31:0] $end
$var wire 1 1 Zero_o $end
$var wire 3 2 ALUCtrl_i [2:0] $end
$upscope $end
$scope module ALU_Control $end
$var wire 6 3 funct_i [5:0] $end
$var wire 1 4 temp1 $end
$var wire 1 5 temp2 $end
$var wire 2 6 ALUOp_i [1:0] $end
$var wire 3 7 ALUCtrl_o [2:0] $end
$upscope $end
$scope module Add_PC $end
$var wire 32 8 data2_i [31:0] $end
$var wire 32 9 data_o [31:0] $end
$var wire 32 : data1_i [31:0] $end
$upscope $end
$scope module Control $end
$var wire 6 ; Op_i [5:0] $end
$var wire 11 < temp [10:0] $end
$var wire 1 = RegWrite_o $end
$var wire 1 > RegDst_o $end
$var wire 1 ? ALUSrc_o $end
$var wire 2 @ ALUOp_o [1:0] $end
$upscope $end
$scope module Instruction_Memory $end
$var wire 32 A instr_o [31:0] $end
$var wire 32 B addr_i [31:0] $end
$upscope $end
$scope module MUX_ALUSrc $end
$var wire 1 ? select_i $end
$var wire 32 C data_o [31:0] $end
$var wire 32 D data2_i [31:0] $end
$var wire 32 E data1_i [31:0] $end
$upscope $end
$scope module MUX_RegDst $end
$var wire 5 F data1_i [4:0] $end
$var wire 5 G data2_i [4:0] $end
$var wire 1 > select_i $end
$var wire 5 H data_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 I pc_i [31:0] $end
$var wire 1 " rst_i $end
$var wire 1 # start_i $end
$var reg 32 J pc_o [31:0] $end
$upscope $end
$scope module Registers $end
$var wire 5 K RDaddr_i [4:0] $end
$var wire 32 L RDdata_i [31:0] $end
$var wire 5 M RSaddr_i [4:0] $end
$var wire 32 N RSdata_o [31:0] $end
$var wire 5 O RTaddr_i [4:0] $end
$var wire 32 P RTdata_o [31:0] $end
$var wire 1 = RegWrite_i $end
$var wire 1 ! clk_i $end
$upscope $end
$scope module Sign_Extend $end
$var wire 16 Q data_i [15:0] $end
$var wire 32 R data_o [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000100000 R
b100000000100000 Q
b0 P
b0 O
b0 N
b0 M
b0 L
b1000 K
b0 J
b100 I
b1000 H
b1000 G
b0 F
b0 E
b100000000100000 D
b0 C
b0 B
b100000000100000 A
b10 @
0?
1>
1=
b1001000010 <
b0 ;
b0 :
b100 9
b100 8
b10 7
b10 6
05
14
b100000 3
b10 2
11
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b100000000100000 (
b0 '
b11 &
b100000 %
b0 $
0#
0"
0!
$end
#12
1#
1"
#25
b1010 .
b1010 L
b1010 *
b10 2
b10 7
b0 ,
01
b11111111111111111111111111110110 +
b1010 -
b1010 /
b1010 C
15
0>
1?
1=
b0 6
b0 @
b101000000 <
b1001 H
b1001 K
b1010 3
b1000 ;
b1010 D
b1010 R
b1010 Q
b1001 O
b0 G
b1001 F
b100000000010010000000000001010 (
b100000000010010000000000001010 A
b1000 9
b1000 I
b100 '
b100 :
b100 B
b100 J
b1 $
1!
#50
0!
#75
b1101 .
b1101 L
04
b1101 *
b11111111111111111111111111110011 +
b1101 -
b1101 /
b1101 C
b1010 H
b1010 K
b1101 3
b1101 D
b1101 R
b1101 Q
b1010 O
b1010 F
b100000000010100000000000001101 (
b100000000010100000000000001101 A
b1100 9
b1100 I
b1000 '
b1000 :
b1000 B
b1000 J
b0 E
b0 P
b10 $
1!
#100
0!
#125
11
b11 2
b11 7
b1100100 .
b1100100 L
14
1>
0?
b10 6
b10 @
b1001000010 <
b1010 /
b1010 C
b1010 *
b1010 )
b1011 H
b1011 K
b11000 3
b0 ;
b101100000011000 D
b101100000011000 R
b101100000011000 Q
b1001 O
b1100100 ,
b0 +
b10100 -
b1010 0
b1010 N
b1001 M
b1011 G
b1001 F
b1001010010101100000011000 (
b1001010010101100000011000 A
b10000 9
b10000 I
b1100 '
b1100 :
b1100 B
b1100 J
b1010 E
b1010 P
b11 $
1!
#150
0!
#175
b1011 .
b1011 L
b1011 *
b0 )
b1010 ,
01
b1001 +
b1011 -
b1 /
b1 C
b10 2
b10 7
0>
1?
1=
b0 6
b0 @
b101000000 <
b1001 H
b1001 K
b1 3
b1000 ;
b1 D
b1 R
b1 Q
b0 G
b100001001010010000000000000001 (
b100001001010010000000000000001 A
b10100 9
b10100 I
b10000 '
b10000 :
b10000 B
b10000 J
b100 $
1!
#200
0!
#225
b1010 H
b1010 K
b110 2
b110 7
05
1>
0?
b10 6
b10 @
b1001000010 <
b1011 /
b1011 C
b1111 *
b10 .
b10 L
b100010 3
b0 ;
b101000000100010 D
b101000000100010 R
b101000000100010 Q
b1010 M
b1010 G
b1010010010101000000100010 (
b1010010010101000000100010 A
b1001 )
b11000 9
b11000 I
b10100 '
b10100 :
b10100 B
b10100 J
b10001111 ,
b10 +
b11000 -
b1101 0
b1101 N
b1011 E
b1011 P
b101 $
1!
#250
0!
#275
b0 2
b0 7
b10 .
b10 L
04
b10 /
b10 C
b1011 H
b1011 K
b100100 3
b101100000100100 D
b101100000100100 R
b101100000100100 Q
b10 E
b10 P
b1010 O
01
b1001 M
b1011 G
b1010 F
b1001010100101100000100100 (
b1001010100101100000100100 A
b1011 *
b10 )
b11100 9
b11100 I
b11000 '
b11000 :
b11000 B
b11000 J
b10110 ,
b1001 +
b1101 -
b1011 0
b1011 N
b110 $
1!
#300
0!
#325
b10 .
b10 L
b1 2
b1 7
15
b10 *
b1100 H
b1100 K
b100101 3
b110000000100101 D
b110000000100101 R
b110000000100101 Q
b1011 O
b100 ,
11
b0 +
b100 -
b10 0
b10 N
b1010 M
b1100 G
b1011 F
b1010010110110000000100101 (
b1010010110110000000100101 A
b100000 9
b100000 I
b11100 '
b11100 :
b11100 B
b11100 J
b111 $
1!
#350
0!
#375
b10 2
b10 7
b0 .
b0 L
14
05
b0 *
b0 /
b0 C
b0 )
b0 H
b0 K
b0 3
b0 D
b0 R
b0 Q
b0 E
b0 P
b0 O
b0 ,
11
b0 +
b0 -
b0 0
b0 N
b0 M
b0 G
b0 F
b0 (
b0 A
b100100 9
b100100 I
b100000 '
b100000 :
b100000 B
b100000 J
b1000 $
1!
#400
0!
#425
b101000 9
b101000 I
b100100 '
b100100 :
b100100 B
b100100 J
b1001 $
1!
#450
0!
#475
b101100 9
b101100 I
b101000 '
b101000 :
b101000 B
b101000 J
b1010 $
1!
#500
0!
#525
b110000 9
b110000 I
b101100 '
b101100 :
b101100 B
b101100 J
b1011 $
1!
#550
0!
#575
b110100 9
b110100 I
b110000 '
b110000 :
b110000 B
b110000 J
b1100 $
1!
#600
0!
#625
b111000 9
b111000 I
b110100 '
b110100 :
b110100 B
b110100 J
b1101 $
1!
#650
0!
#675
b111100 9
b111100 I
b111000 '
b111000 :
b111000 B
b111000 J
b1110 $
1!
#700
0!
#725
b1000000 9
b1000000 I
b111100 '
b111100 :
b111100 B
b111100 J
b1111 $
1!
#750
0!
#775
b1000100 9
b1000100 I
b1000000 '
b1000000 :
b1000000 B
b1000000 J
b10000 $
1!
#800
0!
#825
b1001000 9
b1001000 I
b1000100 '
b1000100 :
b1000100 B
b1000100 J
b10001 $
1!
#850
0!
#875
b1001100 9
b1001100 I
b1001000 '
b1001000 :
b1001000 B
b1001000 J
b10010 $
1!
#900
0!
#925
b1010000 9
b1010000 I
b1001100 '
b1001100 :
b1001100 B
b1001100 J
b10011 $
1!
#950
0!
#975
b1010100 9
b1010100 I
b1010000 '
b1010000 :
b1010000 B
b1010000 J
b10100 $
1!
#1000
0!
#1025
b1011000 9
b1011000 I
b1010100 '
b1010100 :
b1010100 B
b1010100 J
b10101 $
1!
#1050
0!
#1075
b1011100 9
b1011100 I
b1011000 '
b1011000 :
b1011000 B
b1011000 J
b10110 $
1!
#1100
0!
#1125
b1100000 9
b1100000 I
b1011100 '
b1011100 :
b1011100 B
b1011100 J
b10111 $
1!
#1150
0!
#1175
b1100100 9
b1100100 I
b1100000 '
b1100000 :
b1100000 B
b1100000 J
b11000 $
1!
#1200
0!
#1225
b1101000 9
b1101000 I
b1100100 '
b1100100 :
b1100100 B
b1100100 J
b11001 $
1!
#1250
0!
#1275
b1101100 9
b1101100 I
b1101000 '
b1101000 :
b1101000 B
b1101000 J
b11010 $
1!
#1300
0!
#1325
b1110000 9
b1110000 I
b1101100 '
b1101100 :
b1101100 B
b1101100 J
b11011 $
1!
#1350
0!
#1375
b1110100 9
b1110100 I
b1110000 '
b1110000 :
b1110000 B
b1110000 J
b11100 $
1!
#1400
0!
#1425
b1111000 9
b1111000 I
b1110100 '
b1110100 :
b1110100 B
b1110100 J
b11101 $
1!
#1450
0!
#1475
b1111100 9
b1111100 I
b1111000 '
b1111000 :
b1111000 B
b1111000 J
b11110 $
1!
#1500
0!
#1525
